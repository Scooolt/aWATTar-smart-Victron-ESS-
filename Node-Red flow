[
    {
        "id": "1d2da0ecb43531e3",
        "type": "tab",
        "label": "aWattar",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8eec1f226c042e36",
        "type": "debug",
        "z": "1d2da0ecb43531e3",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 180,
        "wires": []
    },
    {
        "id": "cc4f2cdec6e0768b",
        "type": "function",
        "z": "1d2da0ecb43531e3",
        "name": "Stunden filtern",
        "func": "// Hole die Daten vom HTTP-Request-Node\nconst marketData = msg.payload;\n\n// Überprüfe, ob Daten vorhanden sind\nif (!marketData || !marketData.data || marketData.data.length === 0) {\n    node.error('Keine Daten erhalten.');\n    return null;\n}\n\n// Überprüfe, ob die aktuelle Stunde zwischen 13 und 14 Uhr liegt\nconst currentHour = new Date().getHours();\nif (currentHour !== 13) {\n    // Falls nicht zwischen 13 und 14 Uhr, gib eine leere Nachricht zurück\n    return null;\n}\n\n// Sortiere nach Marktprize und dann nach Startzeit\nconst sortedData = marketData.data.sort((a, b) => a.marketprice - b.marketprice || a.start_timestamp - b.start_timestamp);\n\n// günstigsten Stunden auswählen\nconst cheapestHours = sortedData.slice(0, flow.get(\"AnzahlStunden\"));\n\n// Füge die 5 günstigsten Stunden dem Nachrichtenobjekt hinzu\nmsg.payload = {\n    cheapestHours: cheapestHours\n};\n\n// Speichere die 5 günstigsten Stunden im Flow-Context\nflow.set('cheapestHours', cheapestHours);\n\n// Rückgabe der modifizierten Nachricht\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "8eec1f226c042e36"
            ]
        ]
    },
    {
        "id": "57cf21cbc848c7e2",
        "type": "http request",
        "z": "1d2da0ecb43531e3",
        "name": "Preise von API laden",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.awattar.at/v1/marketdata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "cc4f2cdec6e0768b"
            ]
        ]
    },
    {
        "id": "cd8b5c6b39168df3",
        "type": "inject",
        "z": "1d2da0ecb43531e3",
        "name": "Stündlicher Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "6b36c32c670485a7",
                "a0c65ab5cd8a2851",
                "e202f02b7a337ac4",
                "be0b500794f32339"
            ]
        ]
    },
    {
        "id": "6b36c32c670485a7",
        "type": "delay",
        "z": "1d2da0ecb43531e3",
        "name": "+1m",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "57cf21cbc848c7e2"
            ]
        ]
    },
    {
        "id": "a0c65ab5cd8a2851",
        "type": "delay",
        "z": "1d2da0ecb43531e3",
        "name": "+2m",
        "pauseType": "delay",
        "timeout": "70",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 240,
        "wires": [
            [
                "17e257374cc4f17f"
            ]
        ]
    },
    {
        "id": "7f22beaaa512c735",
        "type": "rbe",
        "z": "1d2da0ecb43531e3",
        "name": "Änderungen weitergeben",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 950,
        "y": 240,
        "wires": [
            [
                "a748e5430cccdc80",
                "0170e9b146bfe414",
                "ec26c9f2c323b381"
            ]
        ]
    },
    {
        "id": "a748e5430cccdc80",
        "type": "switch",
        "z": "1d2da0ecb43531e3",
        "name": "1/0",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "f2073ebb56594146",
                "c044118ff3bc79b7",
                "6669a65cb2aa872e"
            ],
            [
                "c044118ff3bc79b7",
                "247704ba12d5d659"
            ]
        ]
    },
    {
        "id": "cf52d78e7ed2c30c",
        "type": "victron-output-evcharger",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.evcharger/40",
        "path": "/StartStop",
        "serviceObj": {
            "service": "com.victronenergy.evcharger/40",
            "name": "Wallbox"
        },
        "pathObj": {
            "path": "/StartStop",
            "type": "enum",
            "name": "Start/stop charging (manual mode)",
            "enum": {
                "0": "Stop",
                "1": "Start"
            },
            "writable": true
        },
        "initial": "",
        "name": "Laden starten/stoppen",
        "onlyChanges": false,
        "x": 1520,
        "y": 240,
        "wires": []
    },
    {
        "id": "d91eacc0637631fd",
        "type": "victron-output-evcharger",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.evcharger/40",
        "path": "/SetCurrent",
        "serviceObj": {
            "service": "com.victronenergy.evcharger/40",
            "name": "Wallbox"
        },
        "pathObj": {
            "path": "/SetCurrent",
            "type": "float",
            "name": "Set charge current (manual mode) (A)",
            "writable": true
        },
        "initial": "",
        "name": "Ladeleistung",
        "onlyChanges": false,
        "x": 1550,
        "y": 180,
        "wires": []
    },
    {
        "id": "f2073ebb56594146",
        "type": "change",
        "z": "1d2da0ecb43531e3",
        "name": "LadeleistungEV",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"LadeleistungEV\"",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 180,
        "wires": [
            [
                "d91eacc0637631fd"
            ]
        ]
    },
    {
        "id": "6669a65cb2aa872e",
        "type": "victron-output-evcharger",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.evcharger/40",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.evcharger/40",
            "name": "Wallbox"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Mode",
            "enum": {
                "0": "Manual",
                "1": "Auto",
                "2": "Schedule"
            },
            "writable": true
        },
        "initial": "1",
        "name": "Auto Modus",
        "onlyChanges": false,
        "x": 1370,
        "y": 120,
        "wires": []
    },
    {
        "id": "247704ba12d5d659",
        "type": "victron-output-evcharger",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.evcharger/40",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.evcharger/40",
            "name": "Wallbox"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Mode",
            "enum": {
                "0": "Manual",
                "1": "Auto",
                "2": "Schedule"
            },
            "writable": true
        },
        "initial": "1",
        "name": "Manuel Modus",
        "onlyChanges": false,
        "x": 1380,
        "y": 300,
        "wires": []
    },
    {
        "id": "c044118ff3bc79b7",
        "type": "delay",
        "z": "1d2da0ecb43531e3",
        "name": "5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1350,
        "y": 240,
        "wires": [
            [
                "cf52d78e7ed2c30c"
            ]
        ]
    },
    {
        "id": "8b09fcc6f01232fc",
        "type": "inject",
        "z": "1d2da0ecb43531e3",
        "name": " debug 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "7f22beaaa512c735"
            ]
        ]
    },
    {
        "id": "bd49a51a267e7f23",
        "type": "inject",
        "z": "1d2da0ecb43531e3",
        "name": " debug 0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 740,
        "y": 320,
        "wires": [
            [
                "7f22beaaa512c735"
            ]
        ]
    },
    {
        "id": "f8307acf10b323eb",
        "type": "debug",
        "z": "1d2da0ecb43531e3",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "84f1b4c061403106",
        "type": "change",
        "z": "1d2da0ecb43531e3",
        "name": "0/1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "7f22beaaa512c735"
            ]
        ]
    },
    {
        "id": "17e257374cc4f17f",
        "type": "function",
        "z": "1d2da0ecb43531e3",
        "name": "Zeit und Preis filtern",
        "func": "// Holen Sie die günstigsten Stunden aus dem Flow-Context\nconst cheapestHoursData = flow.get('cheapestHours');\n\n\n// Überprüfe, ob Daten vorhanden sind\nif (!cheapestHoursData || cheapestHoursData.length === 0) {\n    node.error('Keine günstigen Stunden erhalten.');\n    return null;\n}\n\n// Definiere die maximale akzeptable Strompreisgrenze €/MWh (angepasst nach Bedarf)\nconst maxAcceptablePrice = flow.get(\"PreisgrenzeSOC\");\n\nconst currentHour = new Date().getHours();\n\nconst isInCheapestHour = cheapestHoursData.some(hour => {\n    const startHour = new Date(hour.start_timestamp).getHours();\n    const endHour = new Date(hour.end_timestamp).getHours();\n\n    return currentHour >= startHour &&\n           currentHour <= endHour &&\n           hour.marketprice <= maxAcceptablePrice;\n});\n\n// Setze die Ausgabe auf 1, wenn sich die aktuelle Stunde in einer der günstigsten Stunden mit akzeptablem Strompreis befindet, sonst auf 0\nmsg.payload = { output: isInCheapestHour ? 1 : 0 };\n\n// Rückgabe der modifizierten Nachricht\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "84f1b4c061403106",
                "f8307acf10b323eb"
            ]
        ]
    },
    {
        "id": "e202f02b7a337ac4",
        "type": "function",
        "z": "1d2da0ecb43531e3",
        "name": "Parameter",
        "func": "//Generelle Parameter\n\nPreisgrenze = 20            // [€/MWh]\nAnzahlStunden = 5           // An wie vielen Stunden am Tag soll geladen werden\nSonnenAufgang = 5           // nachtladen Ende\nSonnenUntergang = 17        // nachtladen Start\nSOCPreis = 50               // [€/MWh] - Akzeptable Preiserhöhung in der nacht, sollte der Speicher leer sein\nSOCMin = 30                 // [%] SOC Wert der unterschritten werden muss, um die Nachtladung zu aktivieren\nLadeleistung = 150          // [A] Ladeleistungsbegrenzung mit denen der Akku geladen wird um die Multiplus zu schonen (max Leistung pro MP2 5000 = 70A)\nBezugsleistungMax = 15000   // [W] Gekaufte/Erlaubte Bezugsleistung vom Netzanbieter\n\n//Wallbox Parameter\nLadeleistungEV = 12         // [A] Ladeleisung der Wallbox\n\nflow.set('Preisgrenze', Preisgrenze)\nflow.set('AnzahlStunden', AnzahlStunden)\nflow.set('SonnenAufgang', SonnenAufgang)\nflow.set('SonnenUntergang', SonnenUntergang)\nflow.set('SOCPreis', SOCPreis)\nflow.set('SOCMin', SOCMin)\nflow.set('Ladeleistung', Ladeleistung)\nflow.set('BezugsleistungMax', BezugsleistungMax)\n\nflow.set('LadeleistungEV', LadeleistungEV)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "02bfa6ba1bd56255",
        "type": "victron-input-battery",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.battery/512",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/512",
            "name": "SEPLOS"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 180,
        "y": 480,
        "wires": [
            [
                "67f80b1185f6c2fb"
            ]
        ]
    },
    {
        "id": "67f80b1185f6c2fb",
        "type": "function",
        "z": "1d2da0ecb43531e3",
        "name": "Nachtladung",
        "func": "// Extrahiere den SOC-Wert aus der Nachrichten-Payload\nSOC = msg.payload;\n\n// Holen der aktuellen Preisgrenze aus dem Flow-Speicher\nPreisgrenzeSOC = flow.get(\"Preisgrenze\");\n\n// Ermittle die aktuelle Stunde\nconst currentHour = new Date().getHours();\n\n// Überprüfe, ob der SOC-Wert unter der minimalen Grenze liegt und es sich um die Zeit nach Sonnenuntergang oder vor Sonnenaufgang handelt\nif (SOC <= flow.get(\"SOCMin\") && currentHour > flow.get(\"SonnenUntergang\") || currentHour < flow.get(\"SonnenAufgang\")) {\n    // Wenn die Bedingung erfüllt ist, erhöhe die Preisgrenze um den SOC-Preis\n    PreisgrenzeSOC = flow.get(\"Preisgrenze\") + flow.get(\"SOCPreis\");\n}\n\n// Setze den SOC-Wert im Flow-Speicher\nflow.set('SOC', SOC);\n\n// Überprüfe, ob der SOC-Wert 100% erreicht hat oder unter dem minimalen SOC-Wert liegt\nif (SOC >= 100 || SOC < flow.get(\"SOCMin\")) {\n    // Setze die PreisgrenzeSOC im Flow-Speicher auf den aktualisierten Wert\n    flow.set('PreisgrenzeSOC', PreisgrenzeSOC);\n    // Wenn der SOC-Wert 100% erreicht hat oder unter dem minimalen SOC-Wert liegt, stoppe den Flow vorerst\n}\n\n// Rückgabe der Nachricht\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4512e40653271ee8",
        "type": "inject",
        "z": "1d2da0ecb43531e3",
        "name": "debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "57cf21cbc848c7e2"
            ]
        ]
    },
    {
        "id": "382387d733eb6611",
        "type": "inject",
        "z": "1d2da0ecb43531e3",
        "name": "debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 490,
        "y": 280,
        "wires": [
            [
                "17e257374cc4f17f"
            ]
        ]
    },
    {
        "id": "6ab5e3f2450a4e5c",
        "type": "victron-output-ess",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.settings",
        "path": "/Settings/SystemSetup/MaxChargeCurrent",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "Venus settings"
        },
        "pathObj": {
            "path": "/Settings/SystemSetup/MaxChargeCurrent",
            "type": "float",
            "name": "Charge current limit (A)",
            "writable": true
        },
        "name": "Ladestrombegrenzung",
        "onlyChanges": false,
        "x": 1560,
        "y": 500,
        "wires": []
    },
    {
        "id": "0170e9b146bfe414",
        "type": "change",
        "z": "1d2da0ecb43531e3",
        "name": "Ladeleistung",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "\"Ladeleistung\"",
                "tot": "flow"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "1000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 500,
        "wires": [
            [
                "6ab5e3f2450a4e5c"
            ]
        ]
    },
    {
        "id": "be0b500794f32339",
        "type": "delay",
        "z": "1d2da0ecb43531e3",
        "name": "+30m",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "57cf21cbc848c7e2"
            ]
        ],
        "info": "Manchmal kommen die Preise von der API verspätet"
    },
    {
        "id": "984719fa76aba201",
        "type": "comment",
        "z": "1d2da0ecb43531e3",
        "name": "Bitte Anpassen",
        "info": "",
        "x": 140,
        "y": 300,
        "wires": []
    },
    {
        "id": "5a4801be6416ca38",
        "type": "comment",
        "z": "1d2da0ecb43531e3",
        "name": "Nachtladung",
        "info": "Verwendete Batterie und State of charge auswählen",
        "x": 130,
        "y": 440,
        "wires": []
    },
    {
        "id": "c56074d0861b590b",
        "type": "comment",
        "z": "1d2da0ecb43531e3",
        "name": "EV Charger",
        "info": "Richtige Wallbox auswählen",
        "x": 1370,
        "y": 80,
        "wires": []
    },
    {
        "id": "2076682565bfe65a",
        "type": "comment",
        "z": "1d2da0ecb43531e3",
        "name": "Speichernutzung",
        "info": "",
        "x": 1380,
        "y": 400,
        "wires": []
    },
    {
        "id": "5e3dd15418890bd5",
        "type": "victron-output-ess",
        "z": "1d2da0ecb43531e3",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "Venus settings"
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)",
            "writable": true
        },
        "name": "Netzbezugspunkt",
        "onlyChanges": false,
        "x": 1590,
        "y": 440,
        "wires": []
    },
    {
        "id": "ec26c9f2c323b381",
        "type": "change",
        "z": "1d2da0ecb43531e3",
        "name": "BezugsleistungMax",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "\"BezugsleistungMax\"",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "30",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 440,
        "wires": [
            [
                "5e3dd15418890bd5"
            ]
        ]
    }
]
